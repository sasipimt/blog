[
  {
    "objectID": "posts/fastai/part1/mountain_classifier.html",
    "href": "posts/fastai/part1/mountain_classifier.html",
    "title": "Mountain Classifier üèî",
    "section": "",
    "text": "Inspired by fastai lesson1, I want to create an image classifier. I love travelling and I think it will be challenging for a model to classify similar-looking mountains. So, I chose the Matterhorn, my favourite mountain. I searched the internet and found Mount Assiniboine, the Matterhorn of the Rockies.\n\n\n\n\n\nfrom ddgs import DDGS\nfrom fastcore.all import *\n\ndef search_images(keywords, max_images=200): return L(DDGS().images(keywords, max_results=max_images)).itemgot('image')\nimport time, json\n\nTo make it more challenging, I chose winter images. That way, the mountains are covered with snow and look more similar.\n\nfrom fastdownload import download_url\nfrom fastai.vision.all import *\n\ndownload_url(search_images('matterhorn in winter', max_images=1)[0], 'matterhorn.jpg', show_progress=False)\nImage.open('matterhorn.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\ndownload_url(search_images('assiniboine in winter', max_images=1)[0], 'assiniboine.jpg', show_progress=False)\nImage.open('assiniboine.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\nThose mountains look similarüëçüèª. Next, I downloaded more images and saved them at /mountains/matterhorn and /mountains/assiniboine.\n\nsearches = 'matterhorn','assiniboine'\npath = Path('mountains')\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} in winter'))\n    time.sleep(5)\n    resize_images(path/o, max_size=400, dest=path/o)\n\nNext, I verified images and removed corrupted images.\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n0\n\n\nNext, I used DataBlock to create DataLoaders and viewed sample images from it.\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=6)\n\n\n\n\n\n\n\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(5)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.326607\n0.827004\n0.411765\n00:14\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.460767\n0.435698\n0.235294\n00:21\n\n\n1\n0.308592\n0.249649\n0.088235\n00:21\n\n\n2\n0.224121\n0.258147\n0.117647\n00:21\n\n\n3\n0.180325\n0.252384\n0.117647\n00:21\n\n\n4\n0.144590\n0.231590\n0.117647\n00:21\n\n\n\n\n\n\n\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('matterhorn.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a matterhorn: {probs[0]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nProbability it's a matterhorn: 0.0000\n\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('assiniboine.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a assiniboine: {probs[1]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nProbability it's a assiniboine: 0.6165\n\n\nThe result was confusing at first. For the Matterhorn image, the model predicted that it was the Matterhorn, but the probability that it‚Äôs the Matterhorn is 0. Also, for the Mount Assiniboine image, the model predicted that it was the Matterhorn, but the probability that it‚Äôs Mount Assiniboine is 0.6165.\nI thought class 0 was Matterhorn and class 1 was Assiniboine since I downloaded the Matterhorn images first. However, after reading the fastai doc and discovering that the CategoryBlock sorts classes alphabetically if not specified. That‚Äôs why class 0 is Assiniboine and class 1 is Matterhorn.\nWe can check the class index and class name mapping by using the vocab attribute of the DataLoaders\n\nprint(f\"Class names: {dls.vocab}\")\n\nClass names: ['assiniboine', 'matterhorn']\n\n\nSo I fixed the code using the class index and label from the vocab\n\nfor i, class_name in enumerate(dls.vocab):\n    mountain_name,_,probs = learn.predict(PILImage.create(f\"{class_name}.jpg\"))\n    print(f\"This is a: {class_name}.\")\n    print(f\"Model predicts that it is a: {mountain_name}.\")\n    print(f\"Probability it's a {class_name}: {probs[i]:.4f}\\n\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nModel predicts that it is a: matterhorn.\nProbability it's a assiniboine: 0.3835\n\n\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nModel predicts that it is a: matterhorn.\nProbability it's a matterhorn: 1.0000\n\n\n\nBut if we want class 0 to be Matterhorn and class 1 to be Assiniboine, we can pass the class name to the vocab of the CategoryBlock and set sort=False.\n\ndls2 = DataBlock(\n    blocks=(ImageBlock, CategoryBlock(vocab=['matterhorn', 'assiniboine'], sort=False)),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\n\nprint(f\"Class names: {dls2.vocab}\")\n\nClass names: ['matterhorn', 'assiniboine']\n\n\nHowever, the model‚Äôs result is not good enough. It predicted wrong, so I will fine-tune it more.\n\nlearn.fine_tune(5)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.013699\n0.264133\n0.117647\n00:12\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.013848\n0.313575\n0.117647\n00:14\n\n\n1\n0.010381\n0.432843\n0.147059\n00:13\n\n\n2\n0.013321\n0.674214\n0.235294\n00:13\n\n\n3\n0.010601\n0.601326\n0.205882\n00:13\n\n\n4\n0.009109\n0.330560\n0.117647\n00:13\n\n\n\n\n\n\nfor i, class_name in enumerate(dls.vocab):\n    mountain_name,_,probs = learn.predict(PILImage.create(f\"{class_name}.jpg\"))\n    print(f\"This is a: {class_name}.\")\n    print(f\"Model predicts that it is a: {mountain_name}.\")\n    print(f\"Probability it's a {class_name}: {probs[i]:.4f}\\n\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nModel predicts that it is a: assiniboine.\nProbability it's a assiniboine: 0.9114\n\n\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nModel predicts that it is a: matterhorn.\nProbability it's a matterhorn: 0.9913\n\n\n\nBetter. It predicted correctly this timeüéâ.\n\n\n\n\nTo make it more challenging, I want a model that can classify many mountains.\n\n\nI downloaded two more mountain images: Mont Blanc and Titlis.\n\ndownload_url(search_images('mont blanc in winter', max_images=1)[0], 'mont blanc.jpg', show_progress=False)\nImage.open('mont blanc.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\ndownload_url(search_images('titlis in winter', max_images=1)[0], 'titlis.jpg', show_progress=False)\nImage.open('titlis.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\nThen, I downloaded and saved the new images in the same parent folder /mountains.\n‚îî‚îÄ‚îÄ mountains/\n    ‚îú‚îÄ‚îÄ matterhorn/\n    ‚îú‚îÄ‚îÄ assiniboine/\n    ‚îú‚îÄ‚îÄ mont blanc/ \n    ‚îî‚îÄ‚îÄ titlis/\nThe rest is the same as binary classification above.\n\nsearches = 'mont blanc','titlis'\npath = Path('mountains')\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} in winter'))\n    time.sleep(5)\n    resize_images(path/o, max_size=400, dest=path/o)\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n1\n\n\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=12)\n\n\n\n\n\n\n\n\n\n\n\n\nlearn = vision_learner(dls, resnet101, metrics=error_rate)\nlearn.fine_tune(5)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n2.270211\n1.331686\n0.485714\n02:05\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.645704\n0.985022\n0.342857\n02:53\n\n\n1\n0.422413\n0.975001\n0.271429\n03:01\n\n\n2\n0.340291\n0.947498\n0.257143\n02:53\n\n\n3\n0.259572\n0.723719\n0.200000\n02:55\n\n\n4\n0.203068\n0.686363\n0.185714\n02:57\n\n\n\n\n\n\n\n\n\nfor i, class_name in enumerate(dls.vocab):\n    mountain_name,_,probs = learn.predict(PILImage.create(f\"{class_name}.jpg\"))\n    print(f\"This is a: {class_name}.\")\n    print(f\"Model predicts that it is a: {mountain_name}.\")\n    print(f\"Probability it's a {class_name}: {probs[i]:.4f}\\n\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nModel predicts that it is a: mont blanc.\nProbability it's a assiniboine: 0.3844\n\n\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nModel predicts that it is a: matterhorn.\nProbability it's a matterhorn: 1.0000\n\n\n\n\n\n\n\n\n\n\nThis is a: mont blanc.\nModel predicts that it is a: mont blanc.\nProbability it's a mont blanc: 1.0000\n\n\n\n\n\n\n\n\n\n\nThis is a: titlis.\nModel predicts that it is a: titlis.\nProbability it's a titlis: 0.9990\n\n\n\nNot bad. Correct 3/4.\n\nlearn.fine_tune(5)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.046293\n0.733727\n0.200000\n02:09\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.027783\n0.858846\n0.185714\n02:56\n\n\n1\n0.038438\n1.451459\n0.242857\n03:03\n\n\n2\n0.151360\n1.095311\n0.200000\n02:50\n\n\n3\n0.185351\n1.092717\n0.157143\n02:52\n\n\n4\n0.166083\n0.955429\n0.157143\n02:51\n\n\n\n\n\n\nfor i, class_name in enumerate(dls.vocab):\n    mountain_name,_,probs = learn.predict(PILImage.create(f\"{class_name}.jpg\"))\n    print(f\"This is a: {class_name}.\")\n    print(f\"Model predicts that it is a: {mountain_name}.\")\n    print(f\"Probability it's a {class_name}: {probs[i]:.4f}\\n\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nModel predicts that it is a: assiniboine.\nProbability it's a assiniboine: 0.8058\n\n\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nModel predicts that it is a: matterhorn.\nProbability it's a matterhorn: 1.0000\n\n\n\n\n\n\n\n\n\n\nThis is a: mont blanc.\nModel predicts that it is a: mont blanc.\nProbability it's a mont blanc: 1.0000\n\n\n\n\n\n\n\n\n\n\nThis is a: titlis.\nModel predicts that it is a: titlis.\nProbability it's a titlis: 1.0000\n\n\n\nThe model did an impressive job. Well done! üëèüèª"
  },
  {
    "objectID": "posts/fastai/part1/mountain_classifier.html#the-matterhorn-vs-mount-assiniboine",
    "href": "posts/fastai/part1/mountain_classifier.html#the-matterhorn-vs-mount-assiniboine",
    "title": "Mountain Classifier üèî",
    "section": "",
    "text": "from ddgs import DDGS\nfrom fastcore.all import *\n\ndef search_images(keywords, max_images=200): return L(DDGS().images(keywords, max_results=max_images)).itemgot('image')\nimport time, json\n\nTo make it more challenging, I chose winter images. That way, the mountains are covered with snow and look more similar.\n\nfrom fastdownload import download_url\nfrom fastai.vision.all import *\n\ndownload_url(search_images('matterhorn in winter', max_images=1)[0], 'matterhorn.jpg', show_progress=False)\nImage.open('matterhorn.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\ndownload_url(search_images('assiniboine in winter', max_images=1)[0], 'assiniboine.jpg', show_progress=False)\nImage.open('assiniboine.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\nThose mountains look similarüëçüèª. Next, I downloaded more images and saved them at /mountains/matterhorn and /mountains/assiniboine.\n\nsearches = 'matterhorn','assiniboine'\npath = Path('mountains')\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} in winter'))\n    time.sleep(5)\n    resize_images(path/o, max_size=400, dest=path/o)\n\nNext, I verified images and removed corrupted images.\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n0\n\n\nNext, I used DataBlock to create DataLoaders and viewed sample images from it.\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=6)\n\n\n\n\n\n\n\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(5)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.326607\n0.827004\n0.411765\n00:14\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.460767\n0.435698\n0.235294\n00:21\n\n\n1\n0.308592\n0.249649\n0.088235\n00:21\n\n\n2\n0.224121\n0.258147\n0.117647\n00:21\n\n\n3\n0.180325\n0.252384\n0.117647\n00:21\n\n\n4\n0.144590\n0.231590\n0.117647\n00:21\n\n\n\n\n\n\n\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('matterhorn.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a matterhorn: {probs[0]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nProbability it's a matterhorn: 0.0000\n\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('assiniboine.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a assiniboine: {probs[1]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nProbability it's a assiniboine: 0.6165\n\n\nThe result was confusing at first. For the Matterhorn image, the model predicted that it was the Matterhorn, but the probability that it‚Äôs the Matterhorn is 0. Also, for the Mount Assiniboine image, the model predicted that it was the Matterhorn, but the probability that it‚Äôs Mount Assiniboine is 0.6165.\nI thought class 0 was Matterhorn and class 1 was Assiniboine since I downloaded the Matterhorn images first. However, after reading the fastai doc and discovering that the CategoryBlock sorts classes alphabetically if not specified. That‚Äôs why class 0 is Assiniboine and class 1 is Matterhorn.\nWe can check the class index and class name mapping by using the vocab attribute of the DataLoaders\n\nprint(f\"Class names: {dls.vocab}\")\n\nClass names: ['assiniboine', 'matterhorn']\n\n\nSo I fixed the code using the class index and label from the vocab\n\nfor i, class_name in enumerate(dls.vocab):\n    mountain_name,_,probs = learn.predict(PILImage.create(f\"{class_name}.jpg\"))\n    print(f\"This is a: {class_name}.\")\n    print(f\"Model predicts that it is a: {mountain_name}.\")\n    print(f\"Probability it's a {class_name}: {probs[i]:.4f}\\n\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nModel predicts that it is a: matterhorn.\nProbability it's a assiniboine: 0.3835\n\n\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nModel predicts that it is a: matterhorn.\nProbability it's a matterhorn: 1.0000\n\n\n\nBut if we want class 0 to be Matterhorn and class 1 to be Assiniboine, we can pass the class name to the vocab of the CategoryBlock and set sort=False.\n\ndls2 = DataBlock(\n    blocks=(ImageBlock, CategoryBlock(vocab=['matterhorn', 'assiniboine'], sort=False)),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\n\nprint(f\"Class names: {dls2.vocab}\")\n\nClass names: ['matterhorn', 'assiniboine']\n\n\nHowever, the model‚Äôs result is not good enough. It predicted wrong, so I will fine-tune it more.\n\nlearn.fine_tune(5)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.013699\n0.264133\n0.117647\n00:12\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.013848\n0.313575\n0.117647\n00:14\n\n\n1\n0.010381\n0.432843\n0.147059\n00:13\n\n\n2\n0.013321\n0.674214\n0.235294\n00:13\n\n\n3\n0.010601\n0.601326\n0.205882\n00:13\n\n\n4\n0.009109\n0.330560\n0.117647\n00:13\n\n\n\n\n\n\nfor i, class_name in enumerate(dls.vocab):\n    mountain_name,_,probs = learn.predict(PILImage.create(f\"{class_name}.jpg\"))\n    print(f\"This is a: {class_name}.\")\n    print(f\"Model predicts that it is a: {mountain_name}.\")\n    print(f\"Probability it's a {class_name}: {probs[i]:.4f}\\n\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nModel predicts that it is a: assiniboine.\nProbability it's a assiniboine: 0.9114\n\n\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nModel predicts that it is a: matterhorn.\nProbability it's a matterhorn: 0.9913\n\n\n\nBetter. It predicted correctly this timeüéâ."
  },
  {
    "objectID": "posts/fastai/part1/mountain_classifier.html#multiclass-classification",
    "href": "posts/fastai/part1/mountain_classifier.html#multiclass-classification",
    "title": "Mountain Classifier üèî",
    "section": "",
    "text": "To make it more challenging, I want a model that can classify many mountains.\n\n\nI downloaded two more mountain images: Mont Blanc and Titlis.\n\ndownload_url(search_images('mont blanc in winter', max_images=1)[0], 'mont blanc.jpg', show_progress=False)\nImage.open('mont blanc.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\ndownload_url(search_images('titlis in winter', max_images=1)[0], 'titlis.jpg', show_progress=False)\nImage.open('titlis.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\nThen, I downloaded and saved the new images in the same parent folder /mountains.\n‚îî‚îÄ‚îÄ mountains/\n    ‚îú‚îÄ‚îÄ matterhorn/\n    ‚îú‚îÄ‚îÄ assiniboine/\n    ‚îú‚îÄ‚îÄ mont blanc/ \n    ‚îî‚îÄ‚îÄ titlis/\nThe rest is the same as binary classification above.\n\nsearches = 'mont blanc','titlis'\npath = Path('mountains')\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} in winter'))\n    time.sleep(5)\n    resize_images(path/o, max_size=400, dest=path/o)\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n1\n\n\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=12)\n\n\n\n\n\n\n\n\n\n\n\n\nlearn = vision_learner(dls, resnet101, metrics=error_rate)\nlearn.fine_tune(5)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n2.270211\n1.331686\n0.485714\n02:05\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.645704\n0.985022\n0.342857\n02:53\n\n\n1\n0.422413\n0.975001\n0.271429\n03:01\n\n\n2\n0.340291\n0.947498\n0.257143\n02:53\n\n\n3\n0.259572\n0.723719\n0.200000\n02:55\n\n\n4\n0.203068\n0.686363\n0.185714\n02:57\n\n\n\n\n\n\n\n\n\nfor i, class_name in enumerate(dls.vocab):\n    mountain_name,_,probs = learn.predict(PILImage.create(f\"{class_name}.jpg\"))\n    print(f\"This is a: {class_name}.\")\n    print(f\"Model predicts that it is a: {mountain_name}.\")\n    print(f\"Probability it's a {class_name}: {probs[i]:.4f}\\n\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nModel predicts that it is a: mont blanc.\nProbability it's a assiniboine: 0.3844\n\n\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nModel predicts that it is a: matterhorn.\nProbability it's a matterhorn: 1.0000\n\n\n\n\n\n\n\n\n\n\nThis is a: mont blanc.\nModel predicts that it is a: mont blanc.\nProbability it's a mont blanc: 1.0000\n\n\n\n\n\n\n\n\n\n\nThis is a: titlis.\nModel predicts that it is a: titlis.\nProbability it's a titlis: 0.9990\n\n\n\nNot bad. Correct 3/4.\n\nlearn.fine_tune(5)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.046293\n0.733727\n0.200000\n02:09\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.027783\n0.858846\n0.185714\n02:56\n\n\n1\n0.038438\n1.451459\n0.242857\n03:03\n\n\n2\n0.151360\n1.095311\n0.200000\n02:50\n\n\n3\n0.185351\n1.092717\n0.157143\n02:52\n\n\n4\n0.166083\n0.955429\n0.157143\n02:51\n\n\n\n\n\n\nfor i, class_name in enumerate(dls.vocab):\n    mountain_name,_,probs = learn.predict(PILImage.create(f\"{class_name}.jpg\"))\n    print(f\"This is a: {class_name}.\")\n    print(f\"Model predicts that it is a: {mountain_name}.\")\n    print(f\"Probability it's a {class_name}: {probs[i]:.4f}\\n\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nModel predicts that it is a: assiniboine.\nProbability it's a assiniboine: 0.8058\n\n\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nModel predicts that it is a: matterhorn.\nProbability it's a matterhorn: 1.0000\n\n\n\n\n\n\n\n\n\n\nThis is a: mont blanc.\nModel predicts that it is a: mont blanc.\nProbability it's a mont blanc: 1.0000\n\n\n\n\n\n\n\n\n\n\nThis is a: titlis.\nModel predicts that it is a: titlis.\nProbability it's a titlis: 1.0000\n\n\n\nThe model did an impressive job. Well done! üëèüèª"
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "Mountain classifier\n\nSingle photo\nMultiple photos"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sasipimt",
    "section": "",
    "text": "Mountain Classifier üèî\n\n\n\nfastai\n\n\n\nA simple classifier to distinguish mountains using fastai.\n\n\n\n\n\nOct 20, 2025\n\n\nSasipim\n\n\n\n\n\nNo matching items"
  }
]