[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sasipimt",
    "section": "",
    "text": "Mountain Classifier\n\n\n\nfastai\n\n\n\nA simple classifier to distinguish between Matterhorn and Assiniboine mountains using fastai.\n\n\n\n\n\nOct 20, 2025\n\n\nSasipim\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/fastai/part1/lesson1/mountain_classifier.html#matterhorn-vs-assiniboine-matterhorn-of-the-rockies",
    "href": "posts/fastai/part1/lesson1/mountain_classifier.html#matterhorn-vs-assiniboine-matterhorn-of-the-rockies",
    "title": "Mountain Classifier",
    "section": "Matterhorn vs Assiniboine (“Matterhorn of the Rockies”)",
    "text": "Matterhorn vs Assiniboine (“Matterhorn of the Rockies”)\n\nfrom ddgs import DDGS\nfrom fastcore.all import *\n\ndef search_images(keywords, max_images=200): return L(DDGS().images(keywords, max_results=max_images)).itemgot('image')\nimport time, json\n\n\nfrom fastdownload import download_url\nfrom fastai.vision.all import *\n\ndownload_url(search_images('matterhorn in winter', max_images=1)[0], 'matterhorn.jpg', show_progress=False)\nImage.open('matterhorn.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\ndownload_url(search_images('assiniboine in winter', max_images=1)[0], 'assiniboine.jpg', show_progress=False)\nImage.open('assiniboine.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\nsearches = 'matterhorn','assiniboine'\npath = Path('matterhorn_or_not')\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} in winter'))\n    time.sleep(5)\n    resize_images(path/o, max_size=400, dest=path/o)\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n0\n\n\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=6)\n\n\n\n\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(5)\n\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n\n\n100%|██████████| 44.7M/44.7M [00:00&lt;00:00, 113MB/s]\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.992223\n1.174857\n0.411765\n00:20\n\n\n\n\n\n\n\n\n\n\n      \n      20.00% [1/5 00:32&lt;02:08]\n    \n    \n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.388923\n0.677145\n0.352941\n00:32\n\n\n\n\n\n    \n      \n      0.00% [0/2 00:00&lt;?]\n    \n\n\n\n---------------------------------------------------------------------------\nKeyboardInterrupt                         Traceback (most recent call last)\n/tmp/ipython-input-2674562609.py in &lt;cell line: 0&gt;()\n      1 learn = vision_learner(dls, resnet18, metrics=error_rate)\n----&gt; 2 learn.fine_tune(5)\n\n/usr/local/lib/python3.12/dist-packages/fastai/callback/schedule.py in fine_tune(self, epochs, base_lr, freeze_epochs, lr_mult, pct_start, div, **kwargs)\n    168     base_lr /= 2\n    169     self.unfreeze()\n--&gt; 170     self.fit_one_cycle(epochs, slice(base_lr/lr_mult, base_lr), pct_start=pct_start, div=div, **kwargs)\n    171 \n    172 # %% ../../nbs/14_callback.schedule.ipynb 67\n\n/usr/local/lib/python3.12/dist-packages/fastai/callback/schedule.py in fit_one_cycle(self, n_epoch, lr_max, div, div_final, pct_start, wd, moms, cbs, reset_opt, start_epoch)\n    119     scheds = {'lr': combined_cos(pct_start, lr_max/div, lr_max, lr_max/div_final),\n    120               'mom': combined_cos(pct_start, *(self.moms if moms is None else moms))}\n--&gt; 121     self.fit(n_epoch, cbs=ParamScheduler(scheds)+L(cbs), reset_opt=reset_opt, wd=wd, start_epoch=start_epoch)\n    122 \n    123 # %% ../../nbs/14_callback.schedule.ipynb 50\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in fit(self, n_epoch, lr, wd, cbs, reset_opt, start_epoch)\n    270             self.opt.set_hypers(lr=self.lr if lr is None else lr)\n    271             self.n_epoch = n_epoch\n--&gt; 272             self._with_events(self._do_fit, 'fit', CancelFitException, self._end_cleanup)\n    273 \n    274     def _end_cleanup(self): self.dl,self.xb,self.yb,self.pred,self.loss = None,(None,),(None,),None,None\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in _with_events(self, f, event_type, ex, final)\n    205 \n    206     def _with_events(self, f, event_type, ex, final=noop):\n--&gt; 207         try: self(f'before_{event_type}');  f()\n    208         except ex: self(f'after_cancel_{event_type}')\n    209         self(f'after_{event_type}');  final()\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in _do_fit(self)\n    259         for epoch in range(self.n_epoch):\n    260             self.epoch=epoch\n--&gt; 261             self._with_events(self._do_epoch, 'epoch', CancelEpochException)\n    262 \n    263     def fit(self, n_epoch, lr=None, wd=None, cbs=None, reset_opt=False, start_epoch=0):\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in _with_events(self, f, event_type, ex, final)\n    205 \n    206     def _with_events(self, f, event_type, ex, final=noop):\n--&gt; 207         try: self(f'before_{event_type}');  f()\n    208         except ex: self(f'after_cancel_{event_type}')\n    209         self(f'after_{event_type}');  final()\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in _do_epoch(self)\n    254     def _do_epoch(self):\n    255         self._do_epoch_train()\n--&gt; 256         self._do_epoch_validate()\n    257 \n    258     def _do_fit(self):\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in _do_epoch_validate(self, ds_idx, dl)\n    250         if dl is None: dl = self.dls[ds_idx]\n    251         self.dl = dl\n--&gt; 252         with torch.no_grad(): self._with_events(self.all_batches, 'validate', CancelValidException)\n    253 \n    254     def _do_epoch(self):\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in _with_events(self, f, event_type, ex, final)\n    205 \n    206     def _with_events(self, f, event_type, ex, final=noop):\n--&gt; 207         try: self(f'before_{event_type}');  f()\n    208         except ex: self(f'after_cancel_{event_type}')\n    209         self(f'after_{event_type}');  final()\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in all_batches(self)\n    211     def all_batches(self):\n    212         self.n_iter = len(self.dl)\n--&gt; 213         for o in enumerate(self.dl): self.one_batch(*o)\n    214 \n    215     def _backward(self): self.loss_grad.backward()\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in one_batch(self, i, b)\n    241         b = self._set_device(b)\n    242         self._split(b)\n--&gt; 243         self._with_events(self._do_one_batch, 'batch', CancelBatchException)\n    244 \n    245     def _do_epoch_train(self):\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in _with_events(self, f, event_type, ex, final)\n    205 \n    206     def _with_events(self, f, event_type, ex, final=noop):\n--&gt; 207         try: self(f'before_{event_type}');  f()\n    208         except ex: self(f'after_cancel_{event_type}')\n    209         self(f'after_{event_type}');  final()\n\n/usr/local/lib/python3.12/dist-packages/fastai/learner.py in _do_one_batch(self)\n    222 \n    223     def _do_one_batch(self):\n--&gt; 224         self.pred = self.model(*self.xb)\n    225         self('after_pred')\n    226         if len(self.yb):\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _wrapped_call_impl(self, *args, **kwargs)\n   1771             return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1772         else:\n-&gt; 1773             return self._call_impl(*args, **kwargs)\n   1774 \n   1775     # torchrec tests the code consistency with the following code\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _call_impl(self, *args, **kwargs)\n   1782                 or _global_backward_pre_hooks or _global_backward_hooks\n   1783                 or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1784             return forward_call(*args, **kwargs)\n   1785 \n   1786         result = None\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/container.py in forward(self, input)\n    242     def forward(self, input):\n    243         for module in self:\n--&gt; 244             input = module(input)\n    245         return input\n    246 \n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _wrapped_call_impl(self, *args, **kwargs)\n   1771             return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1772         else:\n-&gt; 1773             return self._call_impl(*args, **kwargs)\n   1774 \n   1775     # torchrec tests the code consistency with the following code\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _call_impl(self, *args, **kwargs)\n   1782                 or _global_backward_pre_hooks or _global_backward_hooks\n   1783                 or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1784             return forward_call(*args, **kwargs)\n   1785 \n   1786         result = None\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/container.py in forward(self, input)\n    242     def forward(self, input):\n    243         for module in self:\n--&gt; 244             input = module(input)\n    245         return input\n    246 \n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _wrapped_call_impl(self, *args, **kwargs)\n   1771             return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1772         else:\n-&gt; 1773             return self._call_impl(*args, **kwargs)\n   1774 \n   1775     # torchrec tests the code consistency with the following code\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _call_impl(self, *args, **kwargs)\n   1782                 or _global_backward_pre_hooks or _global_backward_hooks\n   1783                 or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1784             return forward_call(*args, **kwargs)\n   1785 \n   1786         result = None\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/container.py in forward(self, input)\n    242     def forward(self, input):\n    243         for module in self:\n--&gt; 244             input = module(input)\n    245         return input\n    246 \n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _wrapped_call_impl(self, *args, **kwargs)\n   1771             return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1772         else:\n-&gt; 1773             return self._call_impl(*args, **kwargs)\n   1774 \n   1775     # torchrec tests the code consistency with the following code\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _call_impl(self, *args, **kwargs)\n   1782                 or _global_backward_pre_hooks or _global_backward_hooks\n   1783                 or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1784             return forward_call(*args, **kwargs)\n   1785 \n   1786         result = None\n\n/usr/local/lib/python3.12/dist-packages/torchvision/models/resnet.py in forward(self, x)\n     94         out = self.relu(out)\n     95 \n---&gt; 96         out = self.conv2(out)\n     97         out = self.bn2(out)\n     98 \n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _wrapped_call_impl(self, *args, **kwargs)\n   1771             return self._compiled_call_impl(*args, **kwargs)  # type: ignore[misc]\n   1772         else:\n-&gt; 1773             return self._call_impl(*args, **kwargs)\n   1774 \n   1775     # torchrec tests the code consistency with the following code\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py in _call_impl(self, *args, **kwargs)\n   1782                 or _global_backward_pre_hooks or _global_backward_hooks\n   1783                 or _global_forward_hooks or _global_forward_pre_hooks):\n-&gt; 1784             return forward_call(*args, **kwargs)\n   1785 \n   1786         result = None\n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/conv.py in forward(self, input)\n    546 \n    547     def forward(self, input: Tensor) -&gt; Tensor:\n--&gt; 548         return self._conv_forward(input, self.weight, self.bias)\n    549 \n    550 \n\n/usr/local/lib/python3.12/dist-packages/torch/nn/modules/conv.py in _conv_forward(self, input, weight, bias)\n    541                 self.groups,\n    542             )\n--&gt; 543         return F.conv2d(\n    544             input, weight, bias, self.stride, self.padding, self.dilation, self.groups\n    545         )\n\nKeyboardInterrupt: \n\n\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('matterhorn.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a matterhorn: {probs[1]:.4f}\")\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('assiniboine.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a assiniboine: {probs[0]:.4f}\")"
  },
  {
    "objectID": "posts/fastai/part1/lesson1/mountain_classifier.html#multi-class-classification",
    "href": "posts/fastai/part1/lesson1/mountain_classifier.html#multi-class-classification",
    "title": "Mountain Classifier",
    "section": "Multi-class classification",
    "text": "Multi-class classification\n\n# Add another 2 classes\nsearches = 'mont blanc','titlis'\npath = Path('matterhorn_or_not')\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} in winter'))\n    time.sleep(5)\n    resize_images(path/o, max_size=400, dest=path/o)\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=12)\n\n\nlearn = vision_learner(dls, resnet101, metrics=error_rate) #ยิ่ง model ใหญ่ยิ่งเก่ง resnet101 train 5 ครั้ง เก่งกว่า resnet50 train 10 ครั้งอีก\nlearn.fine_tune(5)\n\n\nprint(f\"Class names: {learn.dls.vocab}\")\n\n\nmountain_name,_,probs = learn.predict(PILImage.create('matterhorn.jpg'))\nprint(f\"This is a: {mountain_name}.\")\nprint(f\"Probability it's a matterhorn: {probs[1]:.4f}\")\n\n\nmountain_name,_,probs = learn.predict(PILImage.create('assiniboine.jpg'))\nprint(f\"This is a: {mountain_name}.\")\nprint(f\"Probability it's a assiniboine: {probs[0]:.4f}\")\n\n\nmountain_name,_,probs = learn.predict(PILImage.create('mont blanc.jpg'))\nprint(f\"This is a: {mountain_name}.\")\nprint(f\"Probability it's a mont blanc: {probs[2]:.4f}\")\n\n\nmountain_name,_,probs = learn.predict(PILImage.create('titlis.jpg'))\nprint(f\"This is a: {mountain_name}.\")\nprint(f\"Probability it's a titlis: {probs[3]:.4f}\")"
  }
]