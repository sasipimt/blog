[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "my website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "fastai/test.html",
    "href": "fastai/test.html",
    "title": "Mountain classifier",
    "section": "",
    "text": "!pip install -Uqq fastai ddgs\n\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 0.0/41.6 kB ? eta -:--:--\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 41.6/41.6 kB 2.5 MB/s eta 0:00:00\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 5.3/5.3 MB 70.6 MB/s eta 0:00:00\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.3/3.3 MB 99.8 MB/s eta 0:00:00\n\n\n\n\n\n\nfrom ddgs import DDGS #DuckDuckGo has changed the api so we need to update\nfrom fastcore.all import *\n\ndef search_images(keywords, max_images=200): return L(DDGS().images(keywords, max_results=max_images)).itemgot('image')\nimport time, json\n\n\nfrom fastdownload import download_url\nfrom fastai.vision.all import *\n\ndownload_url(search_images('matterhorn in winter', max_images=1)[0], 'matterhorn.jpg', show_progress=False)\nImage.open('matterhorn.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\ndownload_url(search_images('assiniboine in winter', max_images=1)[0], 'assiniboine.jpg', show_progress=False)\nImage.open('assiniboine.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\nsearches = 'matterhorn','assiniboine'\npath = Path('matterhorn_or_not')\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} in winter'))\n    time.sleep(5)\n    resize_images(path/o, max_size=400, dest=path/o)\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n1\n\n\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=6)\n\n\n\n\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(5)\n\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n\n\n100%|██████████| 44.7M/44.7M [00:00&lt;00:00, 61.5MB/s]\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.055349\n1.528476\n0.411765\n00:17\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.444818\n0.414629\n0.205882\n00:35\n\n\n1\n0.364753\n0.191548\n0.088235\n00:29\n\n\n2\n0.269599\n0.176305\n0.088235\n00:26\n\n\n3\n0.201096\n0.195214\n0.088235\n00:26\n\n\n4\n0.163337\n0.206198\n0.088235\n00:26\n\n\n\n\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('matterhorn.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a matterhorn: {probs[1]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nProbability it's a matterhorn: 0.9941\n\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('assiniboine.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a assiniboine: {probs[0]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nProbability it's a assiniboine: 0.6885"
  },
  {
    "objectID": "fastai/test.html#matterhorn-vs-assiniboine-matterhorn-of-the-rockies",
    "href": "fastai/test.html#matterhorn-vs-assiniboine-matterhorn-of-the-rockies",
    "title": "Mountain classifier",
    "section": "",
    "text": "!pip install -Uqq fastai ddgs\n\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 0.0/41.6 kB ? eta -:--:--\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 41.6/41.6 kB 2.5 MB/s eta 0:00:00\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 5.3/5.3 MB 70.6 MB/s eta 0:00:00\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.3/3.3 MB 99.8 MB/s eta 0:00:00\n\n\n\n\n\n\nfrom ddgs import DDGS #DuckDuckGo has changed the api so we need to update\nfrom fastcore.all import *\n\ndef search_images(keywords, max_images=200): return L(DDGS().images(keywords, max_results=max_images)).itemgot('image')\nimport time, json\n\n\nfrom fastdownload import download_url\nfrom fastai.vision.all import *\n\ndownload_url(search_images('matterhorn in winter', max_images=1)[0], 'matterhorn.jpg', show_progress=False)\nImage.open('matterhorn.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\ndownload_url(search_images('assiniboine in winter', max_images=1)[0], 'assiniboine.jpg', show_progress=False)\nImage.open('assiniboine.jpg').to_thumb(256,256)\n\n\n\n\n\n\n\n\n\nsearches = 'matterhorn','assiniboine'\npath = Path('matterhorn_or_not')\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} in winter'))\n    time.sleep(5)\n    resize_images(path/o, max_size=400, dest=path/o)\n\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n1\n\n\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=6)\n\n\n\n\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(5)\n\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n\n\n100%|██████████| 44.7M/44.7M [00:00&lt;00:00, 61.5MB/s]\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.055349\n1.528476\n0.411765\n00:17\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.444818\n0.414629\n0.205882\n00:35\n\n\n1\n0.364753\n0.191548\n0.088235\n00:29\n\n\n2\n0.269599\n0.176305\n0.088235\n00:26\n\n\n3\n0.201096\n0.195214\n0.088235\n00:26\n\n\n4\n0.163337\n0.206198\n0.088235\n00:26\n\n\n\n\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('matterhorn.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a matterhorn: {probs[1]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: matterhorn.\nProbability it's a matterhorn: 0.9941\n\n\n\nis_matterhorn,_,probs = learn.predict(PILImage.create('assiniboine.jpg'))\nprint(f\"This is a: {is_matterhorn}.\")\nprint(f\"Probability it's a assiniboine: {probs[0]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: assiniboine.\nProbability it's a assiniboine: 0.6885"
  }
]